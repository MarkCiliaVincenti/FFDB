rename WeekInfo -> Week
update access modifiers to as restrictive as needed (mainly public -> internal)
-unit & functional tests for everything
- documentation
- get image/diagram of db schemas (both mongo and postgres) for alpha release discussion

---------------
need a SaveToDisk switch (or the opposite)

- Caching static data on init
-- loading all new week stats into memory takes: 8,072,856 = ~8MB (not too bad, should def cache all this)
- weekstats = 21,307,216 (ont too bad)

------------------------------------------

RunInfoBuilder needs to be updated to allow for 
global options that can be accessed in any command.
- for now, making it work by adding the same --config option
to every option in the command tree
- same with the --SkipRosterFetch option!

cleanup baseservicecollection adding of services

go through and update access modifiers (internal, etc)

add readme docs and c# comments

-------------------------------

get TARGETS, 
NFL.com has a stats/overview page for each game
- find some way to get to that, and extract targets information


-- ALSO, team pages on NFL has stats like totla rushing, passing, sacks, etc
which should be added

- rethink the model of how static json files are saved.
currently saving the entire thing, but could lower the total disk space usage
by A LOT by only extracing what we need into a more useable model.
- this would allow updating stuff all in memory easier too.
     - we can use the current logic of parsing the ENTIRE file, such that
	   we make the json requests on the fly as needed, and apply the same logic
	   to map those into a more useable model.
	 - OR, if you want to save, it will first map to the SAME useable model
	   first before saving.
	 - from there, any logic shold be the same, whether you're saving files to disk
	   or not